#!/bin/sh
#
# .local/bin/adf
# Copyright 2023 Keith Maxwell
# SPDX-License-Identifier: MPL-2.0
#
DPI="${DPI:-200}"

die() {
	printf '%s\n' "${1}"
	exit 1
}
found() {
	found=1
	for i in "$@" ; do test -e "${i}" && found=0 && break ; done
	return "${found}"
}
acquire() {
	if test "${1}" = '--no-clean'; then shift
	elif found adf.????.pbm ; then die "Run '${0##*/} clean' first."
	fi
	if scanadf --list-devices | grep -q LiDE25; then
		scanadf \
			--end-count 1 \
			--resolution "${DPI}" \
			--mode Lineart \
			-x 210 \
			-y 297 \
			--output-file 'adf.%04d.pbm' \
			"$@"
	else
		scanadf \
			--source "ADF Duplex" \
			--resolution "${DPI}" \
			--mode Lineart \
			--threshold 200 \
			--rollerdeskew yes \
			-x 210 \
			-y 297 \
			--output-file adf.%04d.pbm \
			"$@"
	fi
}
encode() {
	test "$#" -ge 1 || die "Can't encode - missing output filename"
	output="${1}"
	shift
	if found adf.????.pbm ; then
		jbig2 -T 200 -p -b adf  -s "$@" adf.????.pbm &&
		DPI=$DPI pdf.py adf.sym adf.???? > "${output}" &&
		rm -f adf.sym adf.???? &&
		case "${output}" in
			/*) ;;
			*) output="${PWD}/${output}" ;;
		esac &&
		if command -v ab > /dev/null ; then
			ab --print "${output}"
		fi
	else
		printf 'No input files found, exiting.\n'
		die "Run '${0##*/} acquire' first."
	fi
}
clean() {
	rm -f adf.????.pbm
}
prepare() {
	output="${1}"
	test -n "${output}" || die "No output file name"
	shift
	acquire "$@" &&
	encode "${output}"
}
full() {
	prepare "$@" &&
	clean
}

command="${1}"
shift
case "${command}" in
	a*) acquire "$@" ;;
	c*) clean "$@" ;;
	e*) encode "$@" ;;
	f*) full "$@" ;;
	p*) prepare "$@" ;;
	*) die "Usage: ${0##*/} acquire|clean|encode|full|prepare" ;;
esac
