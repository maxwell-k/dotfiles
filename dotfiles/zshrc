# shellcheck shell=sh disable=SC1090,SC1091,SC1094
#
#    For portability use POSIX compatible shell script syntax where possible
#
# .zshrc
# Copyright 2023 Keith Maxwell
# SPDX-License-Identifier: MPL-2.0
#
bindkey -v
setopt interactive_comments
[ -n "$TMUX" ] && setopt ignore_eof
FPATH="$FPATH:$HOME/.local/share/zsh/site-functions"
autoload -U compinit && compinit
autoload -U bashcompinit && bashcompinit  # for nox below
# Aliases and <80 character functions {{{1
alias cp="cp -i"  # To avoid accidentally over-writing content
alias mv="mv -i"  # "
alias rm="rm -i"  # To avoid accidentally deleting content
alias ls="ls --color=auto --group-directories-first"
alias lc="tig --reverse remotes/origin/HEAD.."

lfcd () { cd "$(command lf -print-last-dir "$@")" || return ; }
ywd() { printf '%s' "$PWD"  | sed "s,^$HOME,~," | ygg ; printf '\n' ; }
gcd() { cd "$(git rev-parse --show-toplevel)" || return ; }
yz() { fc -l -n 0- | fzf --tac | osc52.sh ; }
# }}}
bindkey -M vicmd v edit-command-line  #{{{1
autoload edit-command-line
zle -N edit-command-line
bindkey -M viins '^o' execute-named-cmd #{{{1
# using `escape` then `:` causes the result of `execute-named-cmd` to be
# inserted before the last character of the existing line
if [ -f /usr/share/fzf/shell/key-bindings.zsh ] ; then  #{{{1
  # load binding for ctrl-r ^r
  . /usr/share/fzf/shell/key-bindings.zsh
  # prefer ctrl-e to alt-c
  bindkey -M vicmd -r '\ec'
  bindkey -M viins -r '\ec'
  bindkey -M vicmd '^e' fzf-cd-widget
  bindkey -M viins '^e' fzf-cd-widget
  # ctrl-t is hidden by new tab
  bindkey -M vicmd -r '^T'
  bindkey -M viins -r '^T'
fi
motd() { #{{{1
  : > /run/motd && systemctl --user restart uncommitted && cat /run/motd
} #}}}1
zshrc_fzf_fzf() { #{{{1
  cmd=$( fzf<<EOF
git status --short | fzf --multi | cut -c4-
find | fzf --multi
git ls-files | fzf --multi
EOF
  )
  # shellcheck disable=SC2016
  cmd="$cmd"' | while read item; do echo -n "${(q)item} "; done'  # applies quoting
  LBUFFER="$LBUFFER$(eval "$cmd")"
  unset cmd
  # local is better than POSIX alternatives
  # shellcheck disable=SC3043
  local ret=$?
  zle reset-prompt
  return $ret
}
zle -N zshrc_fzf_fzf
bindkey _M viins '^f' zshrc_fzf_fzf
bindkey _M vicmd '^f' zshrc_fzf_fzf
zshrc_tig() { #{{{1
  # relies on the following in config_home/tig/config
  # bind refs <Ctrl-g> <sh -c "echo %(refname) >/tmp/tig-output"
  # bind generic <Ctrl-g> <sh -c "echo %(commit) >/tmp/tig-output"
  #
  # reset to known good state
  /bin/rm -f /tmp/tig-output

  tig </dev/tty
  # local is better than POSIX alternatives
  # shellcheck disable=SC3043
  local ret=$?
  if [ -f /tmp/tig-output ] ; then
    read -r tig_output </tmp/tig-output
    LBUFFER="$LBUFFER $tig_output"
    unset tig_output
    zle reset-prompt
  fi

  /bin/rm -f /tmp/tig-output
  return $ret
}
zle -N zshrc_tig
zmodload zsh/complist
zshrc_menu_select() { zle expand-or-complete; zle menu-select ; }
zle -N zshrc_menu_select
bindkey -M viins '^[j' zshrc_menu_select
bindkey -M menuselect j down-history
bindkey -M menuselect k up-history
bindkey -M menuselect l vi-forward-char
bindkey -M menuselect h vi-backward-char
bindkey -M menuselect '^[' undo
bindkey -M menuselect '^I' accept-and-hold  # ^I = Tab
yy() { # {{{1
  if [ ! -t 0 ] ; then
    tail -n 1
  else
    fc -ln -1
  fi | tr -d '\n' | ygg ; >&2 printf '\n'
} # }}}1
# Environment variables {{{1
export ANSIBLE_COLLECTIONS_PATH="$HOME/.ansible/collections:/usr/lib/python3.12/site-packages/ansible_collections/"
export DOTDROP_PROFILE=default
if [ -x /usr/bin/vim ]; then
  export EDITOR=vim
else
  export EDITOR=vi
fi
export FCEDIT=$EDITOR
export READNULLCMD=cat  # more is the default
for i in \
  "$HOME/.local/bin" \
  "$HOME/.deno/bin" \
  ;
do
    if ! test -d "$i" ; then continue ; fi
    case "$PATH" in
      *"$i"*) true ;;
      # On macOS the order of prefixies in PATH may be changed by path_helper.
      # Below, if append is chosen instead of prepend, then the order will be
      # unchanged. However it is then not possible to override binaries from
      # system package. This file is more likely used on Linux so prepend is
      # chosen.
      *) export PATH="$i:$PATH" ;;
    esac
done
unset i
if fzf --version >/dev/null 2>&1 ; then export FZF_DEFAULT_OPTS='--height=10 --bind=ctrl-a:select-all' ; fi
if pager --version >/dev/null 2>&1 ; then export PAGER=pager ; fi
# https://chromium.googlesource.com/apps/libapps/+/master/nassh/doc/FAQ.md#Why-do-curses-apps-display-x_q_etc_instead-of-and-and-other-graphics
export NCURSES_NO_UTF8_ACS=1
# }}}1
# PS1 if spaceship is not installed {{{1
if [ -n "$TMUX" ] ; then
  PS1="%? ‚ÅÖ%23<<%d‚ÅÜ%# "
else
  PS1="%? [%23<<%d]%# "
fi
# }}}1
# https://spaceship-prompt.sh {{{1
if [ -f "$HOME/.zsh/spaceship/spaceship.zsh" ] && [ -z "$SPACESHIP_DISABLE" ] ; then
  spaceship_tmux() {  # show a computer inside tmux
    tmux_status=""
    [ -n "$TMUX" ] && tmux_status="üíª "
    spaceship::section::v4 --color white "$tmux_status"
    unset tmux_status
  }
  # the SPACESHIP_* variables are used inside spaceship
  # shellcheck disable=SC2034
  {
    # SPACESHIP_PROMPT_ORDER needs to be an array
    # shellcheck disable=SC3030
    SPACESHIP_PROMPT_ORDER=(
      dir           # Current directory section
      tmux          # See spaceship_tmux above
      venv          # virtualenv section
      git           # Git section (git_branch + git_status)
      host          # Host name so it is clear if using toolbox
      exec_time     # Execution time
      line_sep      # Line break
      jobs          # Background jobs indicator
      exit_code     # Exit code section
      char          # Prompt character
    )
    SPACESHIP_HOST_SHOW=always
    SPACESHIP_HOST_COLOR=black
    SPACESHIP_HOST_COLOR_SSH=black
    SPACESHIP_PROMPT_PREFIXES_SHOW=false
    SPACESHIP_EXIT_CODE_SHOW=true
    SPACESHIP_GIT_BRANCH_PREFIX="ü™µ "
    SPACESHIP_CHAR_SYMBOL="%% "
    SPACESHIP_EXIT_CODE_SYMBOL=""
    SPACESHIP_VENV_SYMBOL="üß´ "
    SPACESHIP_DIR_LOCK_SYMBOL="üîí"
    SPACESHIP_VENV_COLOR=207
  }
  . "$HOME/.zsh/spaceship/spaceship.zsh"
fi #}}}1
# command line completion {{{1
site="$HOME/.local/share/zsh/site-functions"
executable="$HOME/.local/share/pipx/venvs/nox/bin/register-python-argcomplete"
if [ -x "$executable" ] && [ ! -f "$site/_nox" ] ; then
  mkdir --parents "$site"
  "$executable" nox >> "$site/_nox"  # starts with a compdef line
  rm -f "$HOME/.zcompdump"
fi
executable="$HOME/.local/bin/pipx"
if [ -x "$executable" ] && [ ! -f "$site/_pipx" ] ; then
  mkdir --parents "$site"
  printf "#compdef pipx\n" > "$site/_pipx"
  SHIV_CONSOLE_SCRIPT=register-python-argcomplete "$executable" pipx \
    >> "$site/_pipx" 2>/dev/null
  rm -f "$HOME/.zcompdump"
fi
unset executable site #}}}1
if [ -s /run/motd ]; then cat /run/motd ; fi
if [ -f ~/.zshrc.local ]; then . ~/.zshrc.local ; fi # late so that PS1 & spaceship can be overridden
# vim: set foldmethod=marker foldlevel=0 filetype=sh :
